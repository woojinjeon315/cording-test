def solution(data):

    # n = 가로 m = 세로 k 일

    def s1(data):


        width = data[0]
        length = data[1]
        box = list(data[3])
        box_1_list = []
        width_turn = 0
        length_turn = 0


        while length_turn < length:
            while width_turn < width:
                if box[length_turn][width_turn] == 1:
                    box_1_list.append((width_turn, length_turn))
                width_turn += 1
            width_turn = 0
            length_turn += 1


        return  box_1_list
        

    s1_return = s1(data)


    def s2(data):


        box_1_list = s1_return
        nextday_box_1_list = []
        width = data[0]
        length = data[1]

        for box_1_listf in box_1_list:
            if box_1_listf[0] +1 <= width:
                place = (box_1_listf[0] +1, box_1_listf[1])
                nextday_box_1_list.append(place)
            if box_1_listf[0] -1 >= 0:
                place = (box_1_listf[0] -1, box_1_listf[1])
                nextday_box_1_list.append(place)
            if box_1_listf[1] +1 <= length:
                place = (box_1_listf[0], box_1_listf[1] +1)
                nextday_box_1_list.append(place)
            if box_1_listf[1] -1 >= 0:
                place = (box_1_listf[0], box_1_listf[1] -1)
                nextday_box_1_list.append(place)

        nextday_box_1_list.extend(box_1_list)


        return nextday_box_1_list

    aaa = s2(data)


    print(s2(data))
    print(s2(aaa))




    # print(s1(data))
    # print(s2(data))


    

    # for boxf in box:
    #     for boxff in boxf:
    #         if boxff == 0:
    #             count += 1
    

    # return count


# print(solution([5, 5, 3, [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]))# == 7)
# print(solution([7, 5, 4, [[0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]]))# == 2)
print(solution([4, 3, 2, [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]]))# == 5)
