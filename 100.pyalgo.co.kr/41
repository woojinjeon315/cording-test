def solution(data):

    a=0
    def s1(data):
        if not((data.count('(') == data.count(')')) and (data.count('[') == data.count(']')) and (data.count('{') == data.count('}'))):
            return False


    def s2(data):

    
    # while a<=len(data):

    
        if data[a] == data[-a]:
            print('A')
    
    answer 
    return print(answer)



solution("{[()()]}")
solution("[(])")
solution("({[]})")
solution("({[}])")	

###
#gpt help steck

data = "{[()()]}"
stack = []

# 괄호의 짝을 저장하는 딕셔너리
matching_pairs = {')': '(', '}': '{', ']': '['}

# 입력 문자열의 각 문자에 대해 루프 실행
for char in data:
    if char in matching_pairs.values():
        # 문자가 여는 괄호인 경우, 스택에 추가
        stack.append(char)
    elif char in matching_pairs.keys():
        # 문자가 닫는 괄호인 경우, 짝이 맞는지 확인
        if stack == [] or matching_pairs[char] != stack.pop():
            # 스택이 비어 있거나 스택의 상단이 맞지 않는 경우, 불균형으로 판단
            print("불균형")
            break
else:
    # 루프가 끝난 후 스택이 비어 있으면 모든 괄호가 균형 잡혀 있는 것
    if stack == []:
        print("균형 잡힘")
    else:
        print("불균형")
